{
	"info": {
		"_postman_id": "2ad270a5-0d93-4ac5-a9f8-a001592b2fa4",
		"name": "BACKEND GESTION",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "LOGIN",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//list des utilisateurs insérés auto.\r",
									"//suite à l'éxécution de: yarn db-seed\r",
									"const test_users = [\"msal\",\"sro\",\"zsno\",\"myai\"]\r",
									"const user = JSON.parse(pm.request.body.raw).trigramme\r",
									"const res = pm.response\r",
									"const resbody = res.json()\r",
									"//check login status if correct\r",
									"const isValidLogin = test_users.includes(user)\r",
									"pm.expect(res.code).to.equal( !isValidLogin ? 401 : 200)\r",
									"pm.variables.set(\"loggedin\", isValidLogin)\r",
									"//if valid login, decode data and check if admin\r",
									"if(isValidLogin){\r",
									"    const data = atob(resbody.token.split(\".\")[1])\r",
									"    pm.variables.set(\"isAdmin\",JSON.parse(data).isAdmin)\r",
									"    pm.variables.set(\"userID\",JSON.parse(data).id)\r",
									"    pm.variables.set(\"token\",resbody.token)\r",
									"    pm.variables.set(\"user\",user)\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"trigramme\": \"msal\",\r\n    \"password\": \"SIMPLE_PASSWORD\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/auth",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "VERIFY TOKEN",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const logged = pm.variables.get(\"loggedin\")\r",
									"pm.expect(pm.response.code).to.equal(logged ? 200 : 401)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/auth",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "LOGOUT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/auth",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "List Users",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/users?page=0&nom=a&prenom=s&equipe=1&trigramme=m",
							"host": [
								"{{url}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "nom",
									"value": "a"
								},
								{
									"key": "prenom",
									"value": "s"
								},
								{
									"key": "equipe",
									"value": "1"
								},
								{
									"key": "trigramme",
									"value": "m"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User By Trigramme",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/users/@msal",
							"host": [
								"{{url}}"
							],
							"path": [
								"users",
								"@msal"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User By ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/users/1",
							"host": [
								"{{url}}"
							],
							"path": [
								"users",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Own Account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password\": \"SIMPLE_PASSWORD\",\r\n    \"oldPassword\": \"SIMPLE_PASS\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/users/",
							"host": [
								"{{url}}"
							],
							"path": [
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "ADMIN - Create User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const {id} = pm.response.json()\r",
									"pm.variables.set(\"CreatedUserID\",id||0)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nom\": \"TEST\",\r\n    \"prenom\": \"USER\",\r\n    \"password\": \"SIMPLE_PASSWORD\",\r\n    \"image\": \"https://i.ibb.co/bP0fVYj/b2aca63e3ab4.png\",\r\n    \"equipe\": 1,\r\n    \"trigramme\": \"test\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/users/",
							"host": [
								"{{url}}"
							],
							"path": [
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "ADMIN - Update User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nom\": \"TESTEE\",\r\n    \"prenom\": \"ESEEE\",\r\n    \"equipe\": 2,\r\n    \"trigramme\": \"tset\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/users/{{CreatedUserID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"users",
								"{{CreatedUserID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "ADMIN - Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/users/{{CreatedUserID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"users",
								"{{CreatedUserID}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"const { requestName } = pm.info",
							"if (requestName.startsWith(\"ADMIN\")) {",
							"    const isAdmin = pm.variables.get(\"isAdmin\")",
							"    pm.expect(pm.response.code).to.equal(isAdmin ? 200 : 401)",
							"}",
							"else {",
							"    const loggedin = pm.variables.get(\"loggedin\")",
							"    pm.expect(pm.response.code).to.equal(loggedin ? 200 : 401)",
							"}"
						]
					}
				}
			]
		},
		{
			"name": "Equipes",
			"item": [
				{
					"name": "List Equipes",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/equipes?page=0&nom=c",
							"host": [
								"{{url}}"
							],
							"path": [
								"equipes"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "nom",
									"value": "c"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Equipe By ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/equipes/1",
							"host": [
								"{{url}}"
							],
							"path": [
								"equipes",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "ADMIN - Create Equipe",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const {id} = pm.response.json()\r",
									"pm.variables.set(\"CreatedTeamID\", id||0)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nom\": \"TEST_TEAM\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/equipes/",
							"host": [
								"{{url}}"
							],
							"path": [
								"equipes",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "ADMIN - Update Equipe",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nom\": \"UPDATED_NAME\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/equipes/{{CreatedTeamID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"equipes",
								"{{CreatedTeamID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "ADMIN - Delete Equipe",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/equipes/{{CreatedTeamID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"equipes",
								"{{CreatedTeamID}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"const { requestName } = pm.info",
							"if (requestName.startsWith(\"ADMIN\")) {",
							"    const isAdmin = pm.variables.get(\"isAdmin\")",
							"    pm.expect(pm.response.code).to.equal(isAdmin ? 200 : 401)",
							"}",
							"else {",
							"    const loggedin = pm.variables.get(\"loggedin\")",
							"    pm.expect(pm.response.code).to.equal(loggedin ? 200 : 401)",
							"}"
						]
					}
				}
			]
		},
		{
			"name": "Marques",
			"item": [
				{
					"name": "List Marques",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/marques?page=0&nom=c",
							"host": [
								"{{url}}"
							],
							"path": [
								"marques"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "nom",
									"value": "c"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Marque By ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/marques/1",
							"host": [
								"{{url}}"
							],
							"path": [
								"marques",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "ADMIN - Create Marque",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const {id} = pm.response.json()\r",
									"pm.variables.set(\"CreatedMarqueID\", id||0)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nom\": \"TEST_MARQUE\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/marques/",
							"host": [
								"{{url}}"
							],
							"path": [
								"marques",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "ADMIN - Update Marque",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nom\": \"UPDATED_MARQUE\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/marques/{{CreatedMarqueID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"marques",
								"{{CreatedMarqueID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "ADMIN - Delete Marque",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/marques/{{CreatedMarqueID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"marques",
								"{{CreatedMarqueID}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"const { requestName } = pm.info",
							"if (requestName.startsWith(\"ADMIN\")) {",
							"    const isAdmin = pm.variables.get(\"isAdmin\")",
							"    pm.expect(pm.response.code).to.equal(isAdmin ? 200 : 401)",
							"}",
							"else {",
							"    const loggedin = pm.variables.get(\"loggedin\")",
							"    pm.expect(pm.response.code).to.equal(loggedin ? 200 : 401)",
							"}"
						]
					}
				}
			]
		},
		{
			"name": "Categories",
			"item": [
				{
					"name": "List Categories",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/categories?page=0&nom=pc",
							"host": [
								"{{url}}"
							],
							"path": [
								"categories"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "nom",
									"value": "pc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Categorie By ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/categories/1",
							"host": [
								"{{url}}"
							],
							"path": [
								"categories",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "ADMIN - Create Categorie",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const {id} = pm.response.json()\r",
									"pm.variables.set(\"CreatedCategorieID\", id||0)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nom\": \"TEST_CAT\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/categories/",
							"host": [
								"{{url}}"
							],
							"path": [
								"categories",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "ADMIN - Update Categorie",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nom\": \"UPDATED_CAT\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/categories/{{CreatedCategorieID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"categories",
								"{{CreatedCategorieID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "ADMIN - Delete Categorie",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/categories/{{CreatedCategorieID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"categories",
								"{{CreatedCategorieID}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"const { requestName } = pm.info",
							"if (requestName.startsWith(\"ADMIN\")) {",
							"    const isAdmin = pm.variables.get(\"isAdmin\")",
							"    pm.expect(pm.response.code).to.equal(isAdmin ? 200 : 401)",
							"}",
							"else {",
							"    const loggedin = pm.variables.get(\"loggedin\")",
							"    pm.expect(pm.response.code).to.equal(loggedin ? 200 : 401)",
							"}"
						]
					}
				}
			]
		},
		{
			"name": "Fournisseurs",
			"item": [
				{
					"name": "ADMIN - List Fournisseurs",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/fournisseurs?page=0&nom=c",
							"host": [
								"{{url}}"
							],
							"path": [
								"fournisseurs"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "nom",
									"value": "c"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ADMIN - Get Fournisseur By ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/fournisseurs/1",
							"host": [
								"{{url}}"
							],
							"path": [
								"fournisseurs",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "ADMIN - Create Fournisseur",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const {id} = pm.response.json()\r",
									"pm.variables.set(\"CreatedFournisseurID\", id||0)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nom\": \"TEST_fournisseur\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/fournisseurs/",
							"host": [
								"{{url}}"
							],
							"path": [
								"fournisseurs",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "ADMIN - Update Fournisseur",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nom\": \"UPDATED_fournisseurs\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/fournisseurs/{{CreatedFournisseurID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"fournisseurs",
								"{{CreatedFournisseurID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "ADMIN - Delete Fournisseur",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/fournisseurs/{{CreatedFournisseurID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"fournisseurs",
								"{{CreatedFournisseurID}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"const { requestName } = pm.info",
							"if (requestName.startsWith(\"ADMIN\")) {",
							"    const isAdmin = pm.variables.get(\"isAdmin\")",
							"    pm.expect(pm.response.code).to.equal(isAdmin ? 200 : 401)",
							"}",
							"else {",
							"    const loggedin = pm.variables.get(\"loggedin\")",
							"    pm.expect(pm.response.code).to.equal(loggedin ? 200 : 401)",
							"}"
						]
					}
				}
			]
		},
		{
			"name": "Factures",
			"item": [
				{
					"name": "ADMIN - List Factures",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/factures?page=0&fournisseur=f&statut=EN_COURS&gt=0&lt=999999&order=desc&orderBy=montant",
							"host": [
								"{{url}}"
							],
							"path": [
								"factures"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "fournisseur",
									"value": "f"
								},
								{
									"key": "statut",
									"value": "EN_COURS",
									"description": "PAYEE | EN_COURS"
								},
								{
									"key": "gt",
									"value": "0"
								},
								{
									"key": "lt",
									"value": "999999"
								},
								{
									"key": "order",
									"value": "desc"
								},
								{
									"key": "orderBy",
									"value": "montant"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ADMIN - Get Facture By ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/factures/1",
							"host": [
								"{{url}}"
							],
							"path": [
								"factures",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "ADMIN - Get Factures of Fournisseur",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/factures/fournisseur/1",
							"host": [
								"{{url}}"
							],
							"path": [
								"factures",
								"fournisseur",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "ADMIN - Create Facture",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const {id} = pm.response.json()\r",
									"pm.variables.set(\"CreatedFactureID\", id||0)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"fournisseur\": 1,\r\n    \"montant\": 9552\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/factures/",
							"host": [
								"{{url}}"
							],
							"path": [
								"factures",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "ADMIN - Update Facture",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"statut\": \"PAYEE\",\r\n    \"montant\": 9602\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/factures/{{CreatedFactureID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"factures",
								"{{CreatedFactureID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "ADMIN - Delete Facture",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/factures/{{CreatedFactureID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"factures",
								"{{CreatedFactureID}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"const { requestName } = pm.info",
							"if (requestName.startsWith(\"ADMIN\")) {",
							"    const isAdmin = pm.variables.get(\"isAdmin\")",
							"    pm.expect(pm.response.code).to.equal(isAdmin ? 200 : 401)",
							"}",
							"else {",
							"    const loggedin = pm.variables.get(\"loggedin\")",
							"    pm.expect(pm.response.code).to.equal(loggedin ? 200 : 401)",
							"}"
						]
					}
				}
			]
		},
		{
			"name": "Produits",
			"item": [
				{
					"name": "List Produits",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/produits?page=0&nom=s&categories=5,6,8&lt=90&gt=0&marque=1&orderBy=quantite&order=desc",
							"host": [
								"{{url}}"
							],
							"path": [
								"produits"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "nom",
									"value": "s"
								},
								{
									"key": "categories",
									"value": "5,6,8"
								},
								{
									"key": "lt",
									"value": "90"
								},
								{
									"key": "gt",
									"value": "0"
								},
								{
									"key": "marque",
									"value": "1"
								},
								{
									"key": "orderBy",
									"value": "quantite"
								},
								{
									"key": "order",
									"value": "desc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Produit By ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/produits/1",
							"host": [
								"{{url}}"
							],
							"path": [
								"produits",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Connected User Produits",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/produits/user",
							"host": [
								"{{url}}"
							],
							"path": [
								"produits",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "ADMIN - Get User Produits",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/produits/user/2",
							"host": [
								"{{url}}"
							],
							"path": [
								"produits",
								"user",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "ADMIN - Create Produit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const {id} = pm.response.json()\r",
									"pm.variables.set(\"CreatedProdID\", id||0)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nom\": \"TEST_PROD\",\r\n    \"quantite\": 5000,\r\n    \"marque\": 1,\r\n    \"categories\": [1,2,3,4,5],\r\n    \"images\": [\r\n        \"https://images.unsplash.com/photo-1481349518771-20055b2a7b24?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8NHx8cmFuZG9tfGVufDB8fDB8fA%3D%3D&w=1000&q=80\",\r\n        \"https://images.unsplash.com/photo-1493612276216-ee3925520721?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8Mnx8cmFuZG9tfGVufDB8fDB8fA%3D%3D&w=1000&q=80\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/produits/",
							"host": [
								"{{url}}"
							],
							"path": [
								"produits",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "ADMIN - Update Produit",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nom\": \"UPDATED_PROD\",\r\n    \"quantite\": 60,\r\n    \"marque\": 2,\r\n    \"categories\": [1,8],\r\n    \"images\": [\"UPDATED SOLO IMAGE\"]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/produits/{{CreatedProdID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"produits",
								"{{CreatedProdID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "ADMIN - Delete Produit",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/produits/{{CreatedProdID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"produits",
								"{{CreatedProdID}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"const { requestName } = pm.info",
							"if (requestName.startsWith(\"ADMIN\")) {",
							"    const isAdmin = pm.variables.get(\"isAdmin\")",
							"    pm.expect(pm.response.code).to.equal(isAdmin ? 200 : 401)",
							"}",
							"else {",
							"    const loggedin = pm.variables.get(\"loggedin\")",
							"    pm.expect(pm.response.code).to.equal(loggedin ? 200 : 401)",
							"}"
						]
					}
				}
			]
		},
		{
			"name": "Taches",
			"item": [
				{
					"name": "List Taches",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const donnees = pm.response.json()\r",
									"const isAdmin = pm.variables.get(\"isAdmin\")\r",
									"const userID = pm.variables.get(\"userID\")\r",
									"if(!isAdmin){\r",
									"    //make sure user only sees his tasks if not an admin\r",
									"    const resLength = donnees.length;\r",
									"    const userTasksLength = donnees.filter(e=>e.userID === userID).length\r",
									"    pm.expect(resLength).to.equal(userTasksLength)\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/taches/?user=3&produit=1&etat=REJETEE",
							"host": [
								"{{url}}"
							],
							"path": [
								"taches",
								""
							],
							"query": [
								{
									"key": "user",
									"value": "3"
								},
								{
									"key": "produit",
									"value": "1"
								},
								{
									"key": "etat",
									"value": "REJETEE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Tache By ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/taches/3",
							"host": [
								"{{url}}"
							],
							"path": [
								"taches",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Tache",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const {id} = pm.response.json()\r",
									"pm.variables.set(\"CreatedTacheID\", id||0)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"produit\": 1,\r\n    \"quantite\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/taches/",
							"host": [
								"{{url}}"
							],
							"path": [
								"taches",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "ADMIN - Update Tache",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"etat\": \"FINIE\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/taches/{{CreatedTacheID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"taches",
								"{{CreatedTacheID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Tache",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/taches/{{CreatedTacheID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"taches",
								"{{CreatedTacheID}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"//avant de modifier les utilisateurs",
							"//vérifier que le courant util. puisse consulter la tache",
							"//sinon un 401",
							"const tachesBelonging = {",
							"    msal: 1,",
							"    sro: 3,",
							"    zsno: 4",
							"}",
							"const { requestName } = pm.info",
							"if (requestName.startsWith(\"ADMIN\")) {",
							"    const isAdmin = pm.variables.get(\"isAdmin\")",
							"    pm.expect(pm.response.code).to.equal(isAdmin ? 200 : 401)",
							"}",
							"else {",
							"    const loggedin = pm.variables.get(\"loggedin\")",
							"    pm.expect(pm.response.code).to.equal(loggedin ? 200 : 401)",
							"}"
						]
					}
				}
			]
		},
		{
			"name": "Images",
			"item": [
				{
					"name": "Upload Images BASE64",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"images\": [ \"\" ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/images/",
							"host": [
								"{{url}}"
							],
							"path": [
								"images",
								""
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"const { requestName } = pm.info",
							"if (requestName.startsWith(\"ADMIN\")) {",
							"    const isAdmin = pm.variables.get(\"isAdmin\")",
							"    pm.expect(pm.response.code).to.equal(isAdmin ? 200 : 401)",
							"}",
							"else {",
							"    const loggedin = pm.variables.get(\"loggedin\")",
							"    pm.expect(pm.response.code).to.equal(loggedin ? 200 : 401)",
							"}"
						]
					}
				}
			]
		},
		{
			"name": "Count",
			"item": [
				{
					"name": "Global Entities Count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const isAdmin = pm.variables.get(\"isAdmin\")\r",
									"pm.expect(Object.keys(pm.response.json()).length).to.equal(!isAdmin ? 2 : 8)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/count",
							"host": [
								"{{url}}"
							],
							"path": [
								"count"
							]
						}
					},
					"response": []
				},
				{
					"name": "Single Entity Count",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/count/categorie",
							"host": [
								"{{url}}"
							],
							"path": [
								"count",
								"categorie"
							]
						}
					},
					"response": [
						{
							"name": "Single Entity Count",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/count/produit",
									"host": [
										"{{url}}"
									],
									"path": [
										"count",
										"produit"
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						},
						{
							"name": "Single Entity Count",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/count/tache",
									"host": [
										"{{url}}"
									],
									"path": [
										"count",
										"tache"
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						},
						{
							"name": "Single Entity Count",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/count/user",
									"host": [
										"{{url}}"
									],
									"path": [
										"count",
										"user"
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "ADMIN - e1 has X e2",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/count/user/1/tache",
							"host": [
								"{{url}}"
							],
							"path": [
								"count",
								"user",
								"1",
								"tache"
							]
						}
					},
					"response": [
						{
							"name": "How many categories has product 1",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/count/produit/1/categorie",
									"host": [
										"{{url}}"
									],
									"path": [
										"count",
										"produit",
										"1",
										"categorie"
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						},
						{
							"name": "How many products are related to cat 1",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/count/categorie/1/produit",
									"host": [
										"{{url}}"
									],
									"path": [
										"count",
										"categorie",
										"1",
										"produit"
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"const { requestName } = pm.info",
							"if (requestName.startsWith(\"ADMIN\")) {",
							"    const isAdmin = pm.variables.get(\"isAdmin\")",
							"    pm.expect(pm.response.code).to.equal(isAdmin ? 200 : 401)",
							"}",
							"else {",
							"    const loggedin = pm.variables.get(\"loggedin\")",
							"    pm.expect(pm.response.code).to.equal(loggedin ? 200 : 401)",
							"}"
						]
					}
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwibm9tIjoiQW1pbiIsInByZW5vbSI6IlNhbGFoIiwidHJpZ3JhbW1lIjoibXNhbCIsImltYWdlIjpudWxsLCJlcXVpcGUiOnsiaWQiOjEsIm5vbSI6IkNTVCIsImNyZWF0ZWRfYXQiOiIyMDIzLTAzLTI2VDE1OjQ5OjIxLjc2MFoiLCJ1cGRhdGVkX2F0IjoiMjAyMy0wMy0yNlQxNTo0OToyMS43NjBaIn0sImlzQWRtaW4iOnRydWUsImlhdCI6MTY4MDAzOTE0NH0.SO77gRQjZ3djLbG10Rs4xK66X64hZYRDwfhTDNDOfEg",
				"type": "string"
			},
			{
				"key": "key",
				"value": "Authorization",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "url",
			"value": "http://localhost:5000/api"
		}
	]
}